from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message
from keyboards.reply_note_kb import main_note_kb
from keyboards.reply_other_kb import stop_fsm
from utils.utils import get_content_info

note_router = Router()


class AddNoteStates(StatesGroup):
    content = State()  # –û–∂–∏–¥–∞–µ–º –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tags = State()  # –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ —Ç–µ–≥–æ–≤ —Ç–æ–≤–∞—Ä–∞
    check_state = State()  # –§–∏–Ω–∞–ª—å–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞


@note_router.message(F.text == 'üìù –ó–∞–º–µ—Ç–∫–∏')
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer('–¢—ã –≤ –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫. –í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.',
                         reply_markup=main_note_kb())


@note_router.message(F.text == 'üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É')
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer('–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (—Ç–µ–∫—Å—Ç, –º–µ–¥–∏–∞ –∏–ª–∏ –º–µ–¥–∏–∞ + —Ç–µ–∫—Å—Ç). '
                         '–í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –∫ –º–µ–¥–∏–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å—å - –æ—Å—Ç–∞–≤—å –µ–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –∫ –º–µ–¥–∏–∞-—Ñ–∞–π–ª—É ',
                         reply_markup=stop_fsm())
    await state.set_state(AddNoteStates.content)


@note_router.message(AddNoteStates.content)
async def handle_user_note_message(message: Message, state: FSMContext):
    content_info = get_content_info(message)
    if content_info:
        await state.update_data(**content_info)
        await message.answer(
            f"–ü–æ–ª—É—á–µ–Ω–∞ –∑–∞–º–µ—Ç–∫–∞:\n"
            f"–¢–∏–ø: {content_info['content_type']}\n"
            f"–ü–æ–¥–ø–∏—Å—å: {content_info['text_content'] if content_info['text_content'] else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
            f"File ID: {content_info['file_id'] if content_info['file_id'] else '–ù–µ—Ç —Ñ–∞–π–ª–∞'}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥ –∫ –∑–∞–ø–∏—Å–∏ –∏–∑ ",
            reply_markup=main_note_kb())
        await state.set_state(AddNoteStates.tags)
    else:
        await message.answer(
            '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.'
        )
        await state.set_state(AddNoteStates.content)
